THIS DOCUMENT DESCRIBES THE INTERNAL OF THE SDK
and in particular it will describes the behaviour "device driver" writer MUST follow

/********************GOALS*********************/
the main goal is to keep the things _simple_ with minimizing incompatibilities
with OpenML standards and *NIX standards (see incompabilities below)
the "obvious" issue is the portability on MS OSes but I think that the performance issue created by the portability (can't use shared memory directly without creating a layer upon , which means performance loss) are more important
_THIS_IS_A_OPENMLike_FOR_*NIX_

/***************developpers ********************/
for a matter of efficiency, a limitation is set upon the application : POSIX signals are required to be supported : the informations concerning the queues will be heavely dependent on posix realtimes signals and in particular upon posix Message queues signals. the application can then sleep and not create busy waiting : a signal will be sent when a message is queued.

/***************Driver writers******************/
basically a driver writer will :
->use C99 standard type (not the ML* types) a header is provided to keep compatibility with the standard.

->use POSIX/XOpen standard and nothing else (except for special case....) the developpers will try to keep the drivers as close as possible to the standard

->we will use GNU indentation standard (use indent if you don't want) every CVS, patch should be in this format. (give it a try, it's oriented toward lisibility, not like the BSD one), tabulation will be 2 char long (this is well suited with GNU coding style)

-> sources will be 80 col wide... the purpose of doing that is to keep a coding
standard that every developper can read.... remember : you're not alone

->try to use eXtrem Programming methods when possible : you should begin by coding the tests (this will make you think how to code the function) and then the function, make the test run and when everything is ok, commit it ^_^

->be KISS compatible (Keep It Simple, Stupid) : you MUST keep the code as simple as possible (no try to make it generic), this ensure that further modification of the code will be easely made.. (see eXtrem Programming methods that explain this in details)

->Increment the code step by step : begin by making the "minimalistic" working code (and before the associated test), test it, commit it, modify the test to include enhancement, modify the code, test it.... this ensure no regression and that the code remain simple (which garanties that the further modifications will be easely made).

->every memory that is shared must be POSIX shared memory, this because the application can be clustered across multiple process, which can be run through scripts. this implies that the memory will be pagesize granurality

->every memory is constituted of two parts : a semaphore and the data, this for
sharing semaphores across processes.

->the messsages are passed through POSIX messages queues, for processes compability again, for asynchronous feature then (signal is send when message is put into the queue) for prioritisation of the messages (creating the outband feature)

->take whenever possible advantages of posix realtime extensions
(what is the point of having a "portable realtime" if we consume cpu on the "compatibility	layer" ?)

->always set the buffer alignement requirement to a page, this is caused for having the following improvements :
if a transcoder don't need to change the buffer size (maybe because it don't	modify the data type but only modify them) or if the outputed data fits into	the buffer, then the buffers will be shared, some devices can be hardware ones	and then have dma's which have to be page aligned (because the system has to	lock the pages into memory to prevent swapping), then mmap() aware devices	produce pages aligned datas....

-> always set timing informations : the method given by OML is rather clever since it intrinsecly supports multiframe rates.... if you provide timings informations.... if you don't care about such information, simply pass the information on the output queue.

->IDs are 64bits, we will have those devided as follow :
16 bits for systems, 16 for devices, 32 others are used for mlGetCapabilities and
left to devices discretion.....
O_O no ID for paths, xcodes, pipes? no, because they will use separate way to be handled : on open, a device will fork/threads up a new "handler", this handler
will open two messages queues (in and out) which are used to communicate with the device, the open layer will open the MQs on behalf of the process, and return an MLopenid struct to the process (this contain the two MQ descriptors)
doing so ensure that we won't need other id anymore : we talk to the process/thread directly, without using a layer..... this means too that a XCODE can use several id without bothering with "id space polution"

->since we use posix message queue, we will use asynchronous signal notification, don't forget to fill the sigev_signo to SIG_OML_IO (a posix real time signal) and sigev_value.sigval_ptr to notify the device what queue and which signal type (used to know about send/set mechanism).
a set/get call will generate a singnal using sigqueue this help us distinguish when the singnal is generated using set/get

-> each "TODO" will be put into a #warning so as it's easy to track the Todo remaining

->see testcases directory for tests and mlplugin.c for a driver template

->howto debug a test ? don't forget to export LD_LIBRARY_PATH to the current lib build localisation and run ddd ^_^


/***************incompabilities*****************/
the project isn't limited to the OpenML standard and then it'll try to extend the openML standards for the followings points:
-> transcoder are mutipaths transcoders (because most FX require this) the "standard" feature is still supported
	if you look into chapter 6 of the standard you'll see that transcoders have fields	XCODE_SRC_PIPE_IDS and XCODE_DEST_PIPE_IDS so for multistreams we will use thoses	exemple a "merging" transcoder will read on XCODE_SRC_PIPE_ID 0 and 1 and output on	XCODE_DEST_PIPE_ID 2  (those id are internal ids)
	it's recommended to use UST and MSC into buffer provided to transcoders so rates can be dynamically modified.

-> we will maybe provide audio api... but I think that the OpenAL is more powerfull than the limited openML....

->no array support yet.... don't know if we'll support them.

so basically the idea is "not too far from standard execpt when the standard is too lame" ^_^

/**************TODO***************************/
see #warning at compile time to figure out what is needed


help is welcome ^_^

remember that the "rules" set on the developpement of the project aren't set only by pleasure (I, personnaly, don't like the 80 char limit). I tried to make the rules as simple as possible, this for helping sharing the knowledge.
*NIX rocks ^_^
