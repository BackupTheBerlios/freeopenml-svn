<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0025)http://fourcc.org/rgb.php -->
<HTML><HEAD><TITLE>FOURCC.org - RGB pixel formats</TITLE>
<META http-equiv=content-type content=text/html;charset=iso-8859-1>
<META content="MSHTML 6.00.2800.1458" name=GENERATOR>
<SCRIPT src="rgb_fichiers/CSScriptLib.js" type=text/javascript></SCRIPT>
<LINK media=screen href="rgb_fichiers/fcc.css" rel=stylesheet>
<META
content="video, codec, pixel format, FOURCC, fourc character code, multimedia, compress, decompress"
name=keywords>
<META
content="FOURCC.org contains definitions of a large number of PC video codecs and pixel formats. Where available, download links are provided."
name=Description>

</HEAD>
<BODY bgColor=black>
<TABLE cellSpacing=2 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=left>
      <H1>RGB Formats</H1>
      <H3>Overview</H3>
      <P>These formats are defined below. Click on the FOURCC to be taken to its
      definition. </P>
      <P>Please see <A href="http://fourcc.org/fccbihgt.php" target=main>"Bitmap
      Orientation and biHeight"</A> for important additional information. Also,
      if you are interested in RGB to YCrCb conversion, you may find <A
      href="http://fourcc.org/fccyvrgb.php">this page</A> helpful.</P>
      <TABLE cellSpacing=1 border=1>
        <TBODY>
        <TR>
          <TD align=middle><FONT face=Arial><STRONG>Label</STRONG></FONT></TD>
          <TD align=middle><FONT face=Arial><STRONG>FOURCC in
            Hex</STRONG></FONT></TD>
          <TD align=middle><FONT face=Arial><STRONG>Bits per
            pixel</STRONG></FONT></TD>
          <TD align=middle><FONT
          face=Arial><STRONG>Description</STRONG></FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RGB"><FONT
            face=Arial>BI_RGB</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x00000000</FONT></TD>
          <TD align=middle><FONT face=Arial>1,4,8,16,24,32</FONT></TD>
          <TD><FONT face=Arial>Basic Windows bitmap format. 1, 4 and 8 bpp
            versions are palettised. 16, 24 and 32bpp contain raw RGB
            samples.</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RGB"><FONT
            face=Arial>RGB</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x32424752</FONT></TD>
          <TD align=middle><FONT face=Arial>1,4,8,16,24,32</FONT></TD>
          <TD><FONT face=Arial>Alias for BI_RGB</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RLE8"><FONT
            face=Arial>BI_RLE8</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x00000001</FONT></TD>
          <TD align=middle><FONT face=Arial>8</FONT></TD>
          <TD><FONT face=Arial>Run length encoded 8bpp RGB image.</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RLE8"><FONT
            face=Arial>RLE8</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x38454C52</FONT></TD>
          <TD align=middle><FONT face=Arial>8</FONT></TD>
          <TD><FONT face=Arial>Alias for BI_RLE8</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RLE4"><FONT
            face=Arial>BI_RLE4</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x00000002</FONT></TD>
          <TD align=middle><FONT face=Arial>4</FONT></TD>
          <TD><FONT face=Arial>Run length encoded 4bpp RGB image.</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#BI_RLE4"><FONT
            face=Arial>RLE4</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x34454C52</FONT></TD>
          <TD align=middle><FONT face=Arial>4</FONT></TD>
          <TD><FONT face=Arial>Alias for BI_RLE4</FONT></TD></TR>
        <TR>
          <TD align=middle><A
            href="http://fourcc.org/rgb.php#BI_BITFIELDS"><FONT
            face=Arial>BI_BITFIELDS</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x00000003</FONT></TD>
          <TD align=middle><FONT face=Arial>16,24,32</FONT></TD>
          <TD><FONT face=Arial>Raw RGB with arbitrary sample packing within a
            pixel. Packing and precision of R, G and B components is determined
            by bit masks for each.</FONT></TD></TR>
        <TR>
          <TD align=middle><FONT face=Arial>raw</FONT></TD>
          <TD align=middle><FONT face=Arial>0x32776173</FONT></TD>
          <TD align=middle><FONT face=Arial>?</FONT></TD>
          <TD><FONT face=Arial>Apparently "raw, uncompressed RGB bitmaps" but
            I have no idea how many bits per pixel (uses bpp field in
            header?)</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#RGBA"><FONT
            face=Arial>RGBA</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x41424752</FONT></TD>
          <TD align=middle><FONT face=Arial>16,32</FONT></TD>
          <TD><FONT face=Arial>Raw RGB with alpha. Sample precision and
            packing is arbitrary and determined using bit masks for each
            component, as for BI_BITFIELDS.</FONT></TD></TR>
        <TR>
          <TD align=middle><A href="http://fourcc.org/rgb.php#RGBT"><FONT
            face=Arial>RGBT</FONT></A></TD>
          <TD align=middle><FONT face=Arial>0x54424752</FONT></TD>
          <TD align=middle><FONT face=Arial>16,32</FONT></TD>
          <TD><FONT face=Arial>Raw RGB with a transparency field. Layout is as
            for BI_RGB at 16 and 32 bits per pixel but the msb in each pixel
            indicates whether the pixel is transparent or
        not.</FONT></TD></TR></TBODY></TABLE>
      <H3><A name=BI_RGB></A>BI_RGB</H3>
      <P>This is the basic RBG bitmap format which comes in all the common bits
      per pixel flavours. 1, 4 and 8 bpp versions of the format are palettised
      and 16, 24 and 32 bpp contain direct colour information. In all cases, the
      bitmap comprises a rectangular array of packed pixels.</P>
      <H4>1bpp</H4>
      <P>Each pixel is represented by a single bit, giving 8 pixels per BYTE in
      memory. A 2 entry palette defines which colours are used to display the
      pixel if the bit is clear (palette entry 0) or set (palette entry 1).
      Despite the fact that this definition is apparently pretty clear, many
      display adapters and graphics applications appear to reverse the
      definition so, in my experience, you are never entirely sure if a 1bpp
      bitmap will be displayed as a positive or negative image.</P>
      <H4>4bpp</H4>
      <P>Each pixel here is represented by a nibble, giving 2 pixels per BYTE in
      memory. The 4 bits used for the pixel give rise to 16 possible values and,
      hence, a 16 entry colour palette is required to display the image.</P>
      <H4>8bpp</H4>
      <P>Each pixel here is represented by a BYTE, giving 256 possible values
      per pixel and, hence, requiring a 256 entry palette.</P>
      <H4>16bpp</H4>
      <P>Things were pretty simple up to now but some confusion is introduced by
      the 16bpp format. It's actually 15bpp since the default format is actually
      RGB 5:5:5 with the top bit of each u_int16 being unused. In this format,
      each of the red, green and blue colour components is represented by a 5
      bit number giving 32 different levels of each and 32786 possible different
      colours in total (true 16bpp would be RGB 5:6:5 where there are 65536
      possible colours). No palette is used for 16bpp RGB images - the red,
      green and blue values in the pixel are used to define the colours
      directly.</P>
      <P>As an aside, most display drivers handle both RGB 5:5:5 and 5:6:5
      formats but several video codecs get confused when asked to decompress to
      a 5:6:5 desktop so using 5:5:5 as the default is generally safer.</P>
      <H4>24bpp</H4>
      <P>We get back to predictable ground with 24bpp. Here a pixel is
      represented by 3 BYTES containing a red, blue and green sample (with blue
      stored at the lowest address, green next then red). No padding bytes are
      added between pixels. Although I can't find the information in any spec I
      have on my machine currently, I get the feeling that 24bpp images should
      be stored with each line padded to a u_int32 boundary. Information on <A
      href="http://www.mediatel.lu/workshop/graphic/2D_fileformat/h_bmp.html"
      target=_blank>http://www.mediatel.lu/workshop/graphic/2D_fileformat/h_bmp.html</A>
      also suggests that this is true.</P>
      <H4>32bpp</H4>
      <P>This is another version of 24bpp where each pixel is padded to a
      u_int32. Although this is inefficient from a memory standpoint, processing
      u_int32s is a great deal easier than handling byte triples and the format
      is used by many graphics accelerators because of this.</P>
      <H3><A name=BI_RLE8></A>BI_RLE8 </H3>
      <P>The following definition and example are quoted from the Windows 3.1
      API online help file.</P>
      <BLOCKQUOTE>
        <P>"<EM>When the biCompression member is set to BI_RLE8, the bitmap is
        compressed using a run-length encoding format for an 8-bit bitmap. This
        format may be compressed in either of two modes: encoded and absolute.
        Both modes can occur anywhere throughout a single bitmap. </EM></P>
        <P><EM>Encoded mode consists of two bytes: the first byte specifies the
        number of consecutive pixels to be drawn using the color index contained
        in the second byte. In addition, the first byte of the pair can be set
        to zero to indicate an escape that denotes an end of line, end of
        bitmap, or a delta. The interpretation of the escape depends on the
        value of the second byte of the pair. The following list shows the
        meaning of the second byte: </EM></P>
        <TABLE cellSpacing=3 cellPadding=2 border=0>
          <TBODY>
          <TR>
            <TH><FONT face=Arial><EM>Value</EM></FONT></TH>
            <TH align=left><FONT face=Arial><EM>Meaning</EM></FONT></TH></TR>
          <TR>
            <TD align=middle><FONT face=Arial><EM>0</EM></FONT></TD>
            <TD><FONT face=Arial><EM>End of line</EM></FONT></TD></TR>
          <TR>
            <TD align=middle><FONT face=Arial><EM>1</EM></FONT></TD>
            <TD><FONT face=Arial><EM>End of bitmap</EM></FONT></TD></TR>
          <TR>
            <TD align=middle><FONT face=Arial><EM>2</EM></FONT></TD>
            <TD><FONT face=Arial><EM>Delta. The two bytes following the escape
              contain unsigned values indicating the horizontal and vertical
              offset of the next pixel from the current
          position.</EM></FONT></TD></TR></TBODY></TABLE>
        <P><EM>Absolute mode is signaled by the first byte set to zero and the
        second byte set to a value between 0x03 and 0xFF. In absolute mode, the
        second byte represents the number of bytes that follow, each of which
        contains the color index of a single pixel. When the second byte is set
        to 2 or less, the escape has the same meaning as in encoded mode. In
        absolute mode, each run must be aligned on a u_int16 boundary.</EM></P>
        <P><EM>The following example shows the hexadecimal values of an 8-bit
        compressed bitmap:</EM></P>
        <P><EM>03 04 05 06 00 03 45 56<BR>67 00 02 78 00 02 05 01<BR>02 78 00 00
        09 1E 00 01</EM></P>
        <P><EM>This bitmap would expand as follows (two-digit values represent a
        color index for a single pixel): </EM></P>
        <P><EM>04 04 04<BR>06 06 06 06 06<BR>45 56 67<BR>78 78<BR>move current
        position 5 right and 1 down<BR>78 78<BR>end of line<BR>1E 1E 1E 1E 1E 1E
        1E 1E 1E<BR>end of RLE bitmap"</EM></P></BLOCKQUOTE>
      <H3><A name=BI_RLE4></A>BI_RLE4 </H3>
      <P>The following definition and example are quoted from the Windows 3.1
      API online help file.</P>
      <BLOCKQUOTE>
        <P><EM>"When the biCompression member is set to BI_RLE4, the bitmap is
        compressed using a run-length encoding (RLE) format for a 4-bit bitmap,
        which also uses encoded and absolute modes. In encoded mode, the first
        byte of the pair contains the number of pixels to be drawn using the
        color indexes in the second byte. The second byte contains two color
        indexes, one in its high-order nibble (that is, its low-order four bits)
        and one in its low-order nibble. The first of the pixels is drawn using
        the color specified by the high-order nibble, the second is drawn using
        the color in the low-order nibble, the third is drawn with the color in
        the high-order nibble, and so on, until all the pixels specified by the
        first byte have been drawn. </EM></P>
        <P><EM>In absolute mode, the first byte contains zero, the second byte
        contains the number of color indexes that follow, and subsequent bytes
        contain color indexes in their high- and low-order nibbles, one color
        index for each pixel. In absolute mode, each run must be aligned on a
        u_int16 boundary. The end-of-line, end-of-bitmap, and delta escapes also
        apply to BI_RLE4.</EM></P>
        <P><EM>The following example shows the hexadecimal values of a 4-bit
        compressed bitmap: </EM></P>
        <P><EM>03 04 05 06 00 06 45 56 67 00 04 78 00 02 05 01<BR>04 78 00 00 09
        1E 00 01</EM></P>
        <P><EM>This bitmap would expand as follows (single-digit values
        represent a color index for a single pixel): </EM></P>
        <P><EM>0 4 0<BR>0 6 0 6 0<BR>4 5 5 6 6 7<BR>7 8 7 8<BR>move current
        position 5 right and 1 down<BR>7 8 7 8<BR>end of line<BR>1 E 1 E 1 E 1 E
        1<BR>end of RLE bitmap"</EM></P></BLOCKQUOTE>
      <H3><A name=BI_BITFIELDS></A>BI_BITFIELDS </H3>
      <P>To allow for arbitrarily packed RGB samples, BI_BITFIELDS specifies a
      mask field for each of the red, green and blue pixel components. These
      masks indicate the bit positions occupied by each colour component in a
      pixel. In general, the masks are passed to a driver or video API using
      means other than a basic BITMAPINFOHEADER (such as using the appropriate
      fields in a DirectDraw DDPIXELFORMAT structure) but I have heard that it
      is valid to append the masks to the end of the BITMAPINFOHEADER in much
      the same way that a palette is appended for palettised formats.</P>
      <P>For example, 16 bit RGB 5:6:5 can be described using BI_BITFIELDS and
      the following bitmasks:</P>
      <TABLE width="40%" border=0>
        <TBODY>
        <TR>
          <TD width="50%"><FONT face=Arial>Red</FONT></TD>
          <TD width="75%"><FONT face=Arial>0xF800 (5 bits of red)</FONT></TD></TR>
        <TR>
          <TD width="50%"><FONT face=Arial>Green</FONT></TD>
          <TD width="75%"><FONT face=Arial>0x07E0 (6 bits of
        green)</FONT></TD></TR>
        <TR>
          <TD width="50%"><FONT face=Arial>Blue</FONT></TD>
          <TD width="75%"><FONT face=Arial>0x001F (5 bits of
        blue)</FONT></TD></TR></TBODY></TABLE>
      <P>In this case, if used with a BITMAPINFOHEADER, the bitmasks are
      u_int16s (16 bit) since the biBitFields field is set to 16. For a 32bpp
      version, the bitmasks are each u_int32s.</P>
      <H3><A name=RGBA></A>RGBA </H3>
      <P>This format is an extension of BI_BITFIELDS where a fourth bitmask is
      used to define bits in the pixel which correspond to an alpha channel.
      When displayed on top of other images, RGBA pixels are blended with the
      background pixel according to the value of this alpha component.</P>
      <P>For example, a 32bpp RGBA image would likely use the top 8 bits of each
      u_int32 to store the alpha component (the unused byte in normal 32bpp
      RGB). In this case, the masks reported would be:</P>
      <TABLE width="30%" border=0>
        <TBODY>
        <TR>
          <TD width="50%"><FONT face=Arial>Red</FONT></TD>
          <TD width="50%"><FONT face=Arial>0x00FF0000</FONT></TD></TR>
        <TR>
          <TD width="50%"><FONT face=Arial>Green</FONT></TD>
          <TD width="50%"><FONT face=Arial>0x0000FF00</FONT></TD></TR>
        <TR>
          <TD width="50%"><FONT face=Arial>Blue</FONT></TD>
          <TD width="50%"><FONT face=Arial>0x000000FF</FONT></TD></TR>
        <TR>
          <TD width="50%"><FONT face=Arial>Alpha</FONT></TD>
          <TD width="50%"><FONT
      face=Arial>0xFF000000</FONT></TD></TR></TBODY></TABLE>
      <P>giving 256 levels of blending per pixel (8 bits of alpha data).</P>
      <P>In general, the masks used for this format are passed using a means
      other than a BITMAPINFOHEADER (for example, in DirectDraw, the
      DDPIXELFORMAT structure contains fields specifically for R,G,B and Alpha
      masks) but I have also heard that it is acceptable to append 4 u_int32s to
      the end of the BITMAPINFOHEADER structure containing the mask
      information.</P>
      <H3><A name=RGBT></A>RGBT </H3>
      <P>This format can be thought of as a simple extension to the basic 16bpp
      and 32bpp flavours of BI_RGB. RGBT uses the most significant bit of the
      pixel (unused in RGB 16bpp and 32bpp) to indicate transparency. If the bit
      is set, the pixel is visible, otherwise it is transparent. You can also
      think of this as a version of RGBA where the alpha channel comprises a
      single bit.</P>
      <P></P></TD>
    <TD vAlign=top align=left width=120>
      <SCRIPT type=text/javascript><!--
google_ad_client = "pub-1877141572110293";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_color_border = "333333";
google_color_bg = "000000";
google_color_link = "FFFFFF";
google_color_url = "999999";
google_color_text = "CCCCCC";
google_page_url = document.location;
//--></SCRIPT>

      <SCRIPT src="rgb_fichiers/show_ads.js" type=text/javascript>
</SCRIPT>
    </TD></TR>
  <TR>
    <TD vAlign=top align=right colSpan=2>
      <TABLE cellSpacing=2 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD>
            <FORM action=http://www.google.com/custom method=get>
            <TABLE bgColor=#ffffff>
              <TBODY>
              <TR>
                <TD vAlign=top noWrap align=middle height=32><A
                  href="http://www.google.com/"><IMG alt=Google
                  src="rgb_fichiers/Logo_25wht.gif" border=0></A></TD>
                <TD><INPUT type=hidden value=www.fourcc.org
                  name=domains><INPUT maxLength=255 size=31 name=q> <INPUT type=submit value=Search name=sa></TD></TR>
              <TR>
                <TD>&nbsp;</TD>
                <TD><FONT color=#000000 size=-1><INPUT type=radio value=""
                  name=sitesearch> Web <INPUT type=radio CHECKED
                  value=www.fourcc.org name=sitesearch>www.fourcc.org
                  <BR></FONT><INPUT type=hidden value=pub-1877141572110293
                  name=client> <INPUT type=hidden value=1 name=forid> <INPUT
                  type=hidden value=ISO-8859-1 name=ie> <INPUT type=hidden
                  value=ISO-8859-1 name=oe> <INPUT type=hidden
                  value=GALT:#FFFF00;GL:1;DIV:#CCCCCC;VLC:FFFF99;AH:center;BGC:000000;LBGC:000000;ALC:FFFFFF;LC:FFFFFF;T:CCCCCC;GFNT:CCCCCC;GIMP:CCCCCC;LH:50;LW:258;L:http://www.fourcc.org/images/search_logo.jpg;S:http://;FORID:1;
                  name=cof> <INPUT type=hidden value=en
            name=hl></TD></TR></TBODY></TABLE></FORM></TD>
          <TD>
            <ADDRESS>Page was last modified on: June 24 2004
          19:08:16.</ADDRESS></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></BODY></HTML>
